import datetime

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, \
    ReplyKeyboardRemove
from aiogram.utils.callback_data import CallbackData


one_btn_cb = CallbackData('one_btn', 'action')
no_before_photo_cb = CallbackData('no_before_photo', 'action')
after_video_training_cb = CallbackData('after_video_training', 'action')
before_start_training_cb = CallbackData('before_start_training', 'action')
how_work_answer_cb = CallbackData('how_work_answer', 'action')
from_support_cb = CallbackData('from_support', 'user_id')
after_instruction_cb = CallbackData('after_instruction', 'action')
ready_training_cb = CallbackData('ready_training', 'action')
timezone_cb = CallbackData('timezone', 'action')

after_start_cb = CallbackData('after_start', 'action')

check_watched_video_cb = CallbackData('after_video_training_again', 'action')
no_photo_cb = CallbackData('no_photo', 'action')
after_photo_cb = CallbackData('after_photo', 'action')
use_photo_cb = CallbackData('use_photo', 'action')
before_photo_confirm_cb = CallbackData('before_photo_confirm', 'action')

start_day_cb = CallbackData('start_day', 'action')


# –û–±—â–∞—è —á–∞—Å—Ç—å
def generate_kb(row_width, btns) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=row_width)
    kb.add(*btns)
    return kb


def after_start() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data=after_start_cb.new(action='instruction')),
        InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º', callback_data=after_start_cb.new(action='training'))
    ]
    return generate_kb(2, btns)


def timezone() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–î–∞, –ú–°–ö', callback_data=one_btn_cb.new(action='timezone_msk')),
        InlineKeyboardButton(text='–î—Ä—É–≥–æ–µ', callback_data=timezone_cb.new(action='another'))
    ]
    return generate_kb(2, btns)


def main_menu() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    btns = [
        KeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
        KeyboardButton(text='–ó–∞–ø–∏—Å–∏ –ø—Ä–∞–∫—Ç–∏–∫'),
        KeyboardButton(text='–§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏'),
        KeyboardButton(text='FAQ'),
        KeyboardButton(text='–ö—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ üö®'),
        KeyboardButton(text='–°–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å'),
        KeyboardButton(text='–ú–µ–¥–∏—Ç–∞—Ü–∏–∏')
        # KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ')
        # KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    ]
    kb.add(*btns)
    return kb


def faq() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã –≤–æ–ø—Ä–æ—Å—ã',
                             url='https://docs.google.com/spreadsheets/d/1wJVhWmB6233TaK0MJDPJC763sE90rWIVVlijAUK_h-Y/edit')
    ]
    return generate_kb(1, btns)


def one_btn(text, cb_data) -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text=text, callback_data=one_btn_cb.new(action=cb_data))
    ]
    return generate_kb(1, btns)


def how_work_answer() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–î–∞', callback_data=how_work_answer_cb.new(action='yes')),
        InlineKeyboardButton(text='–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã', callback_data=how_work_answer_cb.new(action='support'))
    ]
    return generate_kb(2, btns)


def support_answer() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–î–∞', callback_data=how_work_answer_cb.new(action='yes_support')),
        InlineKeyboardButton(text='–ï—â–µ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã', callback_data=how_work_answer_cb.new(action='no_support'))
    ]
    return generate_kb(2, btns)


def use_photo() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–î–∞', callback_data=use_photo_cb.new(action='yes')),
        InlineKeyboardButton(text='–î–∞, –±–µ–∑ –∏–º–µ–Ω–∏ –∏ –ª–∏—Ü–∞', callback_data=use_photo_cb.new(action='yes_without')),
        InlineKeyboardButton(text='–ù–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', callback_data=use_photo_cb.new(action='no'))
    ]
    return generate_kb(2, btns)


def reaction() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='üß°', callback_data='reaction'),
        InlineKeyboardButton(text='ü¶Ñ', callback_data='reaction'),
        InlineKeyboardButton(text='üëèüèª', callback_data='reaction')
    ]
    return generate_kb(3, btns)


def after_instruction() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–î–∞, —Å–ø–∞—Å–∏–±–æ!', callback_data=after_instruction_cb.new(action='yes')),
        InlineKeyboardButton(text='–ü–æ–º–æ—â—å —Å–∞–ø–ø–æ—Ä—Ç–∞',
                             callback_data=after_instruction_cb.new(action='support'))
    ]
    return generate_kb(1, btns)


def ready_training() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–Ø —Ç–æ–∂–µ', callback_data=ready_training_cb.new(action='ready')),
        InlineKeyboardButton(text='–ü–æ–º–æ—â—å —Å–∞–ø–ø–æ—Ä—Ç–∞',
                             callback_data=ready_training_cb.new(action='support'))
    ]
    return generate_kb(1, btns)


def no_before_photo() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–•–æ—Ä–æ—à–æ', callback_data=no_before_photo_cb.new(action='yes')),
        InlineKeyboardButton(text='–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤(–∞) –æ–±—â–∞—Ç—å—Å—è', callback_data=no_before_photo_cb.new(action='no'))
    ]
    return generate_kb(2, btns)


def schedule_training(vip) -> InlineKeyboardMarkup:
    btns = []
    if vip:
        btns.append(InlineKeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', url='https://t.me/c/1910674437/6'))
    else:
        btns.append(InlineKeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', url='https://t.me/c/1841093161/6'))
    return generate_kb(1, btns)


# ADMIN
def admin_main_menu(role) -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    btns = []
    if role == 1:
        btns.extend([
            KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞'),
            KeyboardButton(text='–¢–µ–∫—Å—Ç—ã'),
            # KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ'),
            KeyboardButton(text='–ó–∞–ø–∏—Å—å –ø—Ä–∞–∫—Ç–∏–∫–∏'),
            KeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ'),
            KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        ])
        if datetime.datetime.now() <= datetime.datetime.strptime('31.08.2023 1:00', '%d.%m.%Y %H:%M'):
            btns.append(KeyboardButton(text='–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'))
    elif role == 2:
        btns.extend([
            KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞'),
            KeyboardButton(text='–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
            KeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ'),
            KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        ])
    elif role == 3:
        btns.extend([
            KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞'),
            KeyboardButton(text='–¢–µ–∫—Å—Ç—ã'),
            # KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ'),
            KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
            KeyboardButton(text='–ó–∞–ø–∏—Å—å –ø—Ä–∞–∫—Ç–∏–∫–∏'),
            KeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ'),
            KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫—É'),
            KeyboardButton(text='–ö—Ä—É–∂–æ–∫')
        ])
    kb.add(*btns)
    return kb


def users2curators() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data='users2curators')
    ]
    return generate_kb(1, btns)


def from_support(text, user_id, status_curator) -> InlineKeyboardMarkup:
    if status_curator:
        btns = [InlineKeyboardButton(text=text, callback_data=from_support_cb.new(user_id=user_id))]
    else:
        btns = [
            InlineKeyboardButton(text=text, callback_data=from_support_cb.new(user_id=user_id)),
            InlineKeyboardButton(text='–°–ø–∞—Å–∏–±–æ', callback_data=from_support_cb.new(user_id='thanks'))
        ]
    return generate_kb(2, btns)


# –î–æ / –ü–æ—Å–ª–µ
def check_watched_video(again=0) -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–î–∞üß°', callback_data=check_watched_video_cb.new(action='yes')),
        InlineKeyboardButton(text='–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å', callback_data=check_watched_video_cb.new(action='no'))
    ]
    if again:
        btns.append(InlineKeyboardButton(text='–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è',
                                         callback_data=check_watched_video_cb.new(action='not_today')))
    else:
        btns.append(InlineKeyboardButton(text='–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ',
                                         callback_data=check_watched_video_cb.new(action='later')))
    return generate_kb(2, btns)


def no_photo() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–î–∞, –≤—Å–µ —Ö–æ—Ä–æ—à–æüß°', callback_data=no_photo_cb.new(action='yes')),
        InlineKeyboardButton(text='–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã!', callback_data=no_photo_cb.new(action='questions')),
    ]
    return generate_kb(1, btns)


def after_photo() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–•–æ—Ä–æ—à–æ', callback_data=after_photo_cb.new(action='yes')),
        InlineKeyboardButton(text='–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤(–∞)',
                             callback_data=after_photo_cb.new(action='no')),
    ]
    return generate_kb(2, btns)


def before_photo_confirm() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–ó–∞–≥—Ä—É–∂–µ–Ω—ã', callback_data=before_photo_confirm_cb.new(action='confirm')),
        InlineKeyboardButton(text='–ï—â–µ —Ñ–æ—Ç–æ', callback_data=before_photo_confirm_cb.new(action='more'))
    ]
    return generate_kb(2, btns)


# –¶–ò–ö–õ –î–ù–Ø
yestarday_cb = CallbackData('yestarday', 'answer')
sleep_cb = CallbackData('sleep', 'answer')
point_scale_cb = CallbackData('point_scale', 'points')
emotion_energy_cb = CallbackData('emotion_energy', 'answer')
eat_cb = CallbackData('eat', 'answer')
work_cb = CallbackData('eat', 'answer')
time_record_cb = CallbackData('time_record', 'action')
evening_practic_cb = CallbackData('evening_practic', 'action')
after_zoom_cb = CallbackData('after_zoom', 'action')


def start_day() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–ë—É–¥—É –æ–Ω–ª–∞–π–Ω', callback_data=start_day_cb.new(action='online')),
        InlineKeyboardButton(text='–ë—É–¥—É –≤ –∑–∞–ø–∏—Å–∏', callback_data=start_day_cb.new(action='time_record'))
    ]
    return generate_kb(2, btns)


def skip_training() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', callback_data=start_day_cb.new(action='record'))
    ]
    return generate_kb(1, btns)


def already_start_training() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–í–æ–π—Ç–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', callback_data=start_day_cb.new(action='online'))
    ]
    return generate_kb(1, btns)


def training_form_start() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–ì–û', callback_data='training_form_start')
    ]
    return generate_kb(1, btns)


def sleep() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–¥–æ 22', callback_data=sleep_cb.new(answer='–¥–æ 22')),
        InlineKeyboardButton(text='–¥–æ 23', callback_data=sleep_cb.new(answer='–¥–æ 23')),
        InlineKeyboardButton(text='–¥–æ 00', callback_data=sleep_cb.new(answer='–¥–æ 00')),
        InlineKeyboardButton(text='–ø–æ—Å–ª–µ 00', callback_data=sleep_cb.new(answer='–ø–æ—Å–ª–µ 00'))
    ]
    return generate_kb(2, btns)


def yesterday() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–¥–∞, –≤ –∑–∞–ø–∏—Å–∏', callback_data=yestarday_cb.new(answer='–≤ –∑–∞–ø–∏—Å–∏')),
        InlineKeyboardButton(text='–¥–∞, –æ–Ω–ª–∞–π–Ω', callback_data=yestarday_cb.new(answer='–æ–Ω–ª–∞–π–Ω')),
        InlineKeyboardButton(text='–Ω–µ—Ç', callback_data=yestarday_cb.new(answer='–Ω–µ—Ç'))
    ]
    return generate_kb(2, btns)


def point_scale() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='1', callback_data=point_scale_cb.new(points='1')),
        InlineKeyboardButton(text='2', callback_data=point_scale_cb.new(points='2')),
        InlineKeyboardButton(text='3', callback_data=point_scale_cb.new(points='3')),
        InlineKeyboardButton(text='4', callback_data=point_scale_cb.new(points='4')),
        InlineKeyboardButton(text='5', callback_data=point_scale_cb.new(points='5')),
        InlineKeyboardButton(text='6', callback_data=point_scale_cb.new(points='6')),
        InlineKeyboardButton(text='7', callback_data=point_scale_cb.new(points='7')),
        InlineKeyboardButton(text='8', callback_data=point_scale_cb.new(points='8')),
        InlineKeyboardButton(text='9', callback_data=point_scale_cb.new(points='9')),
        InlineKeyboardButton(text='10', callback_data=point_scale_cb.new(points='10'))
    ]
    return generate_kb(5, btns)


def emotion_energy() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='1',
                             callback_data=emotion_energy_cb.new(answer='1')),
        InlineKeyboardButton(text='2',
                             callback_data=emotion_energy_cb.new(answer='2')),
        InlineKeyboardButton(text='3',
                             callback_data=emotion_energy_cb.new(answer='3'))
    ]
    return generate_kb(3, btns)


def eat() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–¥–æ 18', callback_data=eat_cb.new(answer='–¥–æ 18')),
        InlineKeyboardButton(text='—Å 18 –¥–æ 19', callback_data=eat_cb.new(answer='—Å 18 –¥–æ 19')),
        InlineKeyboardButton(text='—Å 19 –¥–æ 20', callback_data=eat_cb.new(answer='—Å 19 –¥–æ 20')),
        InlineKeyboardButton(text='–ø–æ—Å–ª–µ 20', callback_data=eat_cb.new(answer='–ø–æ—Å–ª–µ 20'))
    ]
    return generate_kb(2, btns)


def work() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–¥–æ 18', callback_data=work_cb.new(answer='–¥–æ 18')),
        InlineKeyboardButton(text='—Å 18 –¥–æ 19', callback_data=work_cb.new(answer='—Å 18 –¥–æ 19')),
        InlineKeyboardButton(text='—Å 19 –¥–æ 20', callback_data=work_cb.new(answer='—Å 19 –¥–æ 20')),
        InlineKeyboardButton(text='–ø–æ—Å–ª–µ 20', callback_data=work_cb.new(answer='–ø–æ—Å–ª–µ 20'))
    ]
    return generate_kb(2, btns)


def last_btn() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–ù–µ—Ç', callback_data='last_btn_no')
    ]
    return generate_kb(1, btns)


def time_record() -> InlineKeyboardMarkup:
    btns = []
    btns.append(InlineKeyboardButton(text='–£–∫–∞–∂—É –≤—Ä–µ–º—è üïñ', callback_data=time_record_cb.new(action='time')))
    btns.append(InlineKeyboardButton(text='–ò—Å–ø–æ–ª—å–∑—É—é –º–µ–Ω—é üëåüèª', callback_data=start_day_cb.new(action='record')))
    return generate_kb(1, btns)


# def after_zoom() -> InlineKeyboardMarkup:
#     btns = [
#         InlineKeyboardButton(text='–ë—ã–ª(–∞)', callback_data=after_zoom_cb.new(action='yes')),
#         InlineKeyboardButton(text='–ù–µ –±—ã–ª(–∞)', callback_data=after_zoom_cb.new(action='no'))
#     ]
#     return generate_kb(2, btns)


def did_train() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–∏–ª(–∞)', callback_data='did_train'),
        InlineKeyboardButton(text='–ù–µ –≤—ã–ø–æ–ª–Ω–∏–ª(–∞)', callback_data='no_did_train')
    ]
    return generate_kb(1, btns)


def evening_practic() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏', callback_data=evening_practic_cb.new(action='no')),
        InlineKeyboardButton(text='–°–∫–∏–Ω—å –µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', callback_data=evening_practic_cb.new(action='yes'))
    ]
    return generate_kb(1, btns)


record_confirm_cb = CallbackData('record_confirm', 'action')
video_note_confirm_cb = CallbackData('video_note_confirm', 'action')


def record_confirm() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=record_confirm_cb.new(action='yes')),
        InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=record_confirm_cb.new(action='no'))
    ]
    return generate_kb(2, btns)


def video_note_confirm() -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=video_note_confirm_cb.new(action='yes')),
        InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=video_note_confirm_cb.new(action='no'))
    ]
    return generate_kb(2, btns)
